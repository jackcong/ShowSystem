<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.JustMock</name>
    </assembly>
    <members>
        <member name="T:Telerik.JustMock.Abstraction.IFluentConfig`1">
            <summary>
            Interface providing methods for setting up mock instance.
            </summary>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Abstraction.IFluentConfig">
            <summary>
            Interface providing handy methods for setting up mock instance.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.SetBehavior(Telerik.JustMock.Behavior)">
            <summary>
            Sets the behavior of the mock object.
            </summary>
            <param name="behavior"></param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig.MockConstructor">
            <summary>
            Specifies to mock the constructor.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig`1.Implements``1">
            <summary>
            Implements interface to the target mock.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IFluentConfig`1.CallConstructor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Invokes the specified constructor. 
            </summary>
            <param name="expression"></param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Abstraction.IInvocation">
            <summary>
            Defines member representing an invocation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IInvocation.Clone">
            <summary>
            Clones the underlying invocation object.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Abstraction.IInvocation.IgnoreAnyAssertArgs">
            <summary>
            Gets or sets value indicating whether to ignore assert arguments.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Abstraction.IInvocation.IsNested">
            <summary>
            Get or sets if the invocation is nested.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Abstraction.IInvocation.Method">
            <summary>
            Gets the last mock method call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Abstraction.IInvocation.Event">
            <summary>
            Gets the calling event detail.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Abstraction.IInvocation.MatcherArguments">
            <summary>
            Gets the list of matcher arguments.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Abstraction.IInvocation.MatcherPositions">
            <summary>
            Gets or sets the argument matchers position dictionary.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Abstraction.IParamsExtender">
            <summary>
            Extends the invocation arguments for params type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Abstraction.IParamsExtender.Expand(System.Object[])">
            <summary>
            Expands the params as argument list.
            </summary>
            <param name="args">Arguments to expand</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IParamsExtender"/></returns>
        </member>
        <member name="P:Telerik.JustMock.Abstraction.IParamsExtender.Types">
            <summary>
            Gets the arguments types.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Abstraction.IParamsExtender.Arguments">
            <summary>
            Gets the array of argument values.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Action`5">
             <summary>
             Encapsulates a method that has 5 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`6">
             <summary>
             Encapsulates a method that has 6 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`7">
             <summary>
             Encapsulates a method that has 7 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`8">
             <summary>
             Encapsulates a method that has 8 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`9">
             <summary>
             Encapsulates a method that has 9 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`10">
             <summary>
             Encapsulates a method that has 10 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`11">
             <summary>
             Encapsulates a method that has 11 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`12">
             <summary>
             Encapsulates a method that has 12 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`13">
             <summary>
             Encapsulates a method that has 13 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`14">
             <summary>
             Encapsulates a method that has 14 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`15">
             <summary>
             Encapsulates a method that has 15 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Action`16">
             <summary>
             Encapsulates a method that has 16 parameters and does not return a value.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Arg">
            <summary>
            Provides various argument matching shortcuts.
            </summary>
            <summary>
            Allows specification of a matching condition for an argument, rather
            a specific value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Arg.Matches``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Matches argument for the expected condition.
            </summary>
            <typeparam name="T">
            Contains the type of the argument.
            </typeparam>
            <param name="match">Matcher expression</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsInRange``1(``0,``0,Telerik.JustMock.RangeKind)">
            <summary>
            Matches argument for the specified range.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
            <param name="from">starting value.</param>
            <param name="to">ending value.</param>
            <param name="kind">Kind of Range</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsAny``1">
            <summary>
            Matches argument for any value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.IsNull``1">
            <summary>
            Matches argument for null value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.Arg.MatchesWithoutTracking``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Matches argument with expected condition, but does not track it.
            </summary>
            <typeparam name="T">
            Contains the argument type.
            </typeparam>
            <param name="match">Matcher expression</param>
            <returns>Instance of <see cref="T:Telerik.JustMock.Setup.ArgumentContainer"/></returns>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyInt">
            <summary>
            Gets a value indicating that argument can contain any int value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyFloat">
            <summary>
            Gets a value indicating that argument can contain any float value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyDouble">
            <summary>
            Gets a value indicating that argument can contain any double value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyDecimal">
            <summary>
            Gets a value indicating that argument can contain any decimal value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyLong">
            <summary>
            Gets a value indicating that argument can contain any long value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyChar">
            <summary>
            Gets a value indicating that argument can contain any char value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyString">
            <summary>
            Gets a value indicating that argument can contain any string value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyObject">
            <summary>
            Gets a value indicating that argument can contain any object value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyShort">
            <summary>
            Gets a value indicating that argument can contain any short value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyBool">
            <summary>
            Gets a value indicating that argument can contain any bool value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.AnyGuid">
            <summary>
            Gets a value indicating that argument can contain any Guid value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Arg.NullOrEmpty">
            <summary>
            Matches argument for null or empty value.
            </summary>
            <returns>Null</returns>
        </member>
        <member name="T:Telerik.JustMock.ArgExpr">
            <summary>
            Allows specification of a matching condition for an argument for a non-public method, rather
            a specific value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.IsAny``1">
            <summary>
            Matches argument for any value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.Matches``1(System.Linq.Expressions.Expression{System.Predicate{``0}})">
            <summary>
            Matches argument for the expected condition.
            </summary>
            <typeparam name="T">
            Contains the type of the argument.
            </typeparam>
            <param name="match">Matcher expression</param>
            <returns>Argument type</returns>
        </member>
        <member name="M:Telerik.JustMock.ArgExpr.IsNull``1">
            <summary>
            Matches argument for null value.
            </summary>
            <typeparam name="T">Type for the argument</typeparam>
            <returns>Argument type</returns>
        </member>
        <member name="T:Telerik.JustMock.ArgIgnoreAttribute">
            <summary>
            Defines an ignore type matcher
            </summary>
        </member>
        <member name="T:Telerik.JustMock.ArgMatcherAttribute">
            <summary>
            Defines a matcher type argument. 
            </summary>
        </member>
        <member name="T:Telerik.JustMock.ArgMatcher">
            <summary>
            Defines the type of matcher argument
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Args">
            <summary>
            Specifies Mock.Assert to ignore any specific arguments.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Args.Ignore">
            <summary>
            Marks that Mock.Assert should ignore any argument match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Args.NotSpecified">
            <summary>
            Default behavior
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Args.IsIgnored">
            <summary>
            Gets or sets value indicating whethere to ignore arguments.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.AssertionManager.Throw(System.Exception)">
            <summary>
            Throws the target exception.
            </summary>
            <param name="exception">Target exception</param>
        </member>
        <member name="T:Telerik.JustMock.Behavior">
            <summary>
            Specifies the behavior of the mock.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.Loose">
            <summary>
            Specifies that by default mock calls will behave like a stub, unless explicitly setup.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.Strict">
            <summary>
            Specifies that any calls made on the mock 
            will throw an exception if not explictly set.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Behavior.CallOriginal">
            <summary>
            Specifies that by default all calls made on mock will invoke its 
            corresponding original member unless some expecations are set.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.CallProtector">
            <summary>
            Ensures the execution of original code block when applied. 
            </summary>
        </member>
        <member name="M:Telerik.JustMock.CallProtector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.CallProtector"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.CallProtector.Dispose">
            <summary>
            Removes the protection.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.CallProtector.IsProtected">
            <summary>
            Gets a value indicating whether to skip the mock call.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Constructor">
            <summary>
            Defines the behavior of target constructor.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Constructor.NotMocked">
            <summary>
            Specifies that the default constructor should not be mocked. 
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Constructor.Mocked">
            <summary>
            Specifies that the default constructor should be mocked
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.DefaultInterceptor">
            <summary>
            Provides default interceptor implementation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Abstraction.IInterceptor">
            <summary>
            Interface defining the entry point for proxy calls.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Abstraction.IInterceptor.Intercept(Telerik.JustMock.DynamicProxy.Abstraction.IInvocation)">
            <summary>
            Interceps method call.
            </summary>
            <param name="invocation">Wraps the target invocation</param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.DefaultInterceptor.Intercept(Telerik.JustMock.DynamicProxy.Abstraction.IInvocation)">
            <summary>
            Interceps method call.
            </summary>
            <param name="invocation">Wraps the target invocation</param>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Ctor">
            <summary>
             Defines the user constructor for the proxy.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Ctor.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.Ctor"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Ctor.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.Ctor"/> class.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Ctor.Proxied">
            <summary>
            Gets a value indicating if the constructor is to be proxied.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxySettings.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.ProxyFactory"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxySettings.AddInterceptor(System.Object)">
            <summary>
            Adds a interceptor
            </summary>
            <param name="interceptor"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxySettings.GetHashCode">
            <summary>
            Gets the hashCode for the current proxy to be created.
            </summary>
            <returns>HashCode combining the settings for the proxy.</returns>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.ProxySettings.Interfaces">
            <summary>
            Gets lists of interfaces to implement.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.ProxySettings.Target">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.ProxySettings.IncludeObjectOverrides">
            <summary>
            If set to <value>true</value> 
            the proxy will  intercept method overrides like
            <example>GetHashCode(), Equals() and ToString()</example>.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.ProxySettings.SkipBaseConstructor">
            <summary>
            Specifies that proxy should skip the 
            base constructor call.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IAction`1">
            <summary>
            Defines common expecations.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1">
            <summary>
            Defines members for setting up delegate to execute as mehtod body.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead(System.Action)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="action">delegate the method body</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``1(``0)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``1(System.Action{``0})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``2(System.Action{``0,``1})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``3(System.Action{``0,``1,``2})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``4(System.Action{``0,``1,``2,``3})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``5(Telerik.JustMock.Action{``0,``1,``2,``3,``4})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``6(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``7(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``8(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``9(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``10(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``11(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``12(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``13(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``14(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``15(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IDoInstead`1.DoInstead``16(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T16">Type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IAssertable">
            <summary>
            Mark the statement as assertable in <see cref="M:Telerik.JustMock.Mock.Assert``1(``0)"/>.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled">
            <summary>
            Defines an operation that marks a expectation as must.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled.MustBeCalled">
            <summary>
            Specifies that the mock call should be invoked to pass <see cref="M:Telerik.JustMock.Mock.Assert``1(``0)"/>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.ISetupBehavior">
            <summary>
            Defines the expected behavior for a setup.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.ISetupBehavior.InSequence">
            <summary>
            Specifies that justmock should invoke different mock instance for each setup.
            </summary>
            <remarks>
            When this modifier is applied
            for similar type call, the flow of setups will be maintained.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IOccurrence">
            <summary>
            Defines occurrence for a specific call.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.Occurs(System.Int32)">
            <summary>
            Specifies how many times the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursAtLeast(System.Int32)">
            <summary>
            Specifies how many times atleast the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursAtMost(System.Int32)">
            <summary>
            Specifies how many times maximum the call can occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursOnce">
            <summary>
            Specifies that the call must occur once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOccurrence.OccursNever">
            <summary>
            Specifies that the call must never occur.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IOrder">
            <summary>
            Defines the order for mock setups.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IOrder.InOrder">
            <summary>
            Specifies a call should occur in a specific order.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAssertable.CallOriginal">
            <summary>
            Use it to call the real implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises(System.Action,System.Object[])">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
            <param name="eventExpression"></param>
            <param name="args"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises(System.Action,System.EventArgs)">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
            <param name="eventExpression"></param>
            <param name="args">Event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``1(System.Action,System.Func{``0,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``2(System.Action,System.Func{``0,``1,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``3(System.Action,System.Func{``0,``1,``2,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Raises``4(System.Action,System.Func{``0,``1,``2,``3,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Throws(System.Exception)">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Throws``1">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.Throws``1(System.Object[])">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IAction`1.DoNothing">
            <summary>
             Specfies call a to step over (loose mocks only).
            </summary>
            <remarks>
            For loose mocks by default the behavior is step over.
            </remarks>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IInstanceScope`1">
            <summary>
            Specifies instance scope for the expectation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IInstanceScope`1.IgnoreInstance">
            <summary>
            Defines that the expectation should occur for all instance.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IFunc`1">
            <summary>
            Interface containing Func type method expecatations.
            </summary>
            <typeparam name="TReturn"></typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(`0)">
            <summary>	
            Specifies the return value for the expected method.
            </summary>
            <param name="value">any object value</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(System.Func{`0})">
            <summary>
            Specifies the delegate to evaluate and return for the expected method.
            </summary>
            <param name="func">Target delegate to evaluate</param>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns(System.Func{`0,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``1(System.Func{``0,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IFunc`1.Returns``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,`0})">
            <summary>
            Specifies the delegate to evaluate and return value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IIgnorable`1.IgnoreArguments">
            <summary>
            Specifies to ignore any argument for the target call.
            </summary>
            <returns>Func or Action Container</returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation">
            <summary>
            Defines methods to mock non-public members.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange(System.Object,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <param name="target">Target instance</param>
            <param name="memberName">Member name</param>
            <param name="args">Mehtod arguments</param>
            <returns>Refernce to setup actions calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``1(System.Object,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="target">Target instance.</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <typeparam name="TReturn">Return type of the method</typeparam>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <typeparam name="TReturn">Return type of the method</typeparam>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``2(System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``1(System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange``1(System.Type,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="targetType">Target type</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Arrange(System.Type,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <param name="targetType">Target type</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``2(System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <typeparam name="TReturn">Specify the return type for the method</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Type,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Type,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``2(System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <typeparam name="TReturn">Specify the return type for the method</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert(System.Type,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Assert``1(System.Type,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="TReturn">Sepcify the return type method</typeparam>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Initialize``1(System.String,System.Object[])">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.INonPublicExpectation.Initialize(System.Type,System.String,System.Object[])">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IWaitDuration">
            <summary>
            Defines the time to wait before an event can be raised.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Expectations.Abstraction.IWaitDuration.Miliseconds">
            <summary>
            Number of miliseconds to wait for executing the event.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.EventWaitDuration">
            <summary>
            Defines the wait duration for a specific event.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.EventWaitDuration.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Expectations.EventWaitDuration"/> class.
            </summary>
            <param name="miliSeconds">Time duration</param>
        </member>
        <member name="P:Telerik.JustMock.Expectations.EventWaitDuration.Miliseconds">
            <summary>
            Number of miliseconds to wait for executing the event.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.NonPublicExpectation">
            <summary>
            Setups non-public expectations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange(System.Object,System.String,System.Object[])">
            <summary>
            Setups a non-public method for mocking.
            </summary>
            <param name="target">Target instance</param>
            <param name="memberName">Member name</param>
            <param name="args">Method arguments</param>
            <returns>Refernce to setup actions calls</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange``1(System.Object,System.String,System.Object[])">
            <summary>
            Setups a non-public method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="target">Target instance.</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert(System.Object,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <typeparam name="TReturn">Return type of the method</typeparam>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert(System.Object,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="target">Target mock</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange``2(System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange``1(System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="T">Type of the target.</typeparam>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange``1(System.Type,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="targetType">Target type</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Arrange(System.Type,System.String,System.Object[])">
            <summary>
            Arranges a method for mocking.
            </summary>
            <param name="targetType">Target type</param>
            <param name="memberName">Target member name</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``2(System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <typeparam name="TReturn">Specify the return type for the method</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``2(System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="T">Specify the target type</typeparam>
            <typeparam name="TReturn">Specify the return type for the method</typeparam>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert(System.Type,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert``1(System.Type,System.String,Telerik.JustMock.Occurs,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="TReturn">Sepcify the return type method</typeparam>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="occurs">Specifies the number of times a call should occur.</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Assert(System.Type,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Telerik#JustMock#Expectations#Abstraction#INonPublicExpectation#Assert``1(System.Type,System.String,System.Object[])">
            <summary>
            Asserts the specified member that it is called as expected.
            </summary>
            <typeparam name="TReturn">Sepcify the return type method</typeparam>
            <param name="targetType">Type of the target</param>
            <param name="memberName">Name of the member</param>
            <param name="args">Method arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Initialize``1(System.String,System.Object[])">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Expectations.NonPublicExpectation.Initialize(System.Type,System.String,System.Object[])">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="T:Telerik.JustMock.ExpressionVisitor">
            <summary>
            Expression visitor 
            </summary>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits expression and delegates call to different to branch.
            </summary>
            <param name="expression">Target expression</param>
            <returns>Original expression</returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.VisiParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits parameter expression.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constance expression. To be implemented by user.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the memeber access expression. To be implemented by user.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call expression. To be implemented by user.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary expression.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary expression.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.VisitLamda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lamda expression.
            </summary>
            <param name="lambdaExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitor.VisitNewArrayInit(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the new array init expression. To be implemented by user.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.ExpressionVisitors.NewArrayInitVisitor.VisitNewArrayInit(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the new array init expression. To be implemented by user.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.ExpressionVisitors.NewExpressionVisitor.Arguments">
            <summary>
            Gets arguments for the constructor.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.FluentMock`1">
            <summary>
            Defines methods providing different settings for the mock to be created.
            </summary>
            <typeparam name="T">Type of the mcok</typeparam>
        </member>
        <member name="T:Telerik.JustMock.FluentMock">
            <summary>
            Defines methods providing different settings for the mock to be created.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.FluentMock.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.FluentMock"/> class.
            </summary>
            <param name="target">Target type.</param>
        </member>
        <member name="M:Telerik.JustMock.FluentMock.SetBehavior(Telerik.JustMock.Behavior)">
            <summary>
            Sets the behavior of the mock object.
            </summary>
            <param name="behavior">Defines the behavioral mode for mocking</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.FluentMock.MockConstructor">
            <summary>
            Specifies to mock the constructor.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig"/></returns>
        </member>
        <member name="M:Telerik.JustMock.FluentMock.Create">
            <summary>
            Creates the new instance of the mock.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.FluentMock.InterfacesToImplement">
            <summary>
            Gets the list of interfaces to implement in the target mock.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.FluentMock.Arguments">
            <summary>
            Gets or sets the arguments to pass in constructor while creating the mock.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.FluentMock`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.FluentMock`1.Implements``1">
            <summary>
            Implements interface to the target mock.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="M:Telerik.JustMock.FluentMock`1.CallConstructor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Invokes the specified constructor. 
            </summary>
            <param name="expression"></param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Abstraction.IFluentConfig`1"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Frameworks.Abstraction.ITestFramework">
            <summary>
            Defines available test frameworks.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Frameworks.Abstraction.ITestFramework.Throw(System.Exception)">
            <summary>
            Throws the specified exception. 
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Frameworks.Abstraction.ITestFramework.IsAvailable">
            <summary>
            Returns true if the current test framework is available during runtime.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Frameworks.Abstraction.TestFramework.IsAvailable">
            <summary>
            Returns true if the current test framework is available during runtime.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Handlers.Abstraction.IInterceptorHandler">
            <summary>
            Defines entry point for interceptors.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Handlers.Abstraction.IInterceptorHandler.Invoke(System.Object[])">
            <summary>
            Invokes the current interceptor and returns the result.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Handlers.ProxyInterceptorHandler.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Initializes the new instance of the <see cref="T:Telerik.JustMock.Handlers.ProxyInterceptorHandler"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Handlers.ProxyInterceptorHandler.Invoke(System.Object[])">
            <summary>
            Invokes the current interceptor and returns the result.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Handlers.WeaverInterceptorHandler.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Initializes the new instance of the <see cref="T:Telerik.JustMock.Handlers.WeaverInterceptorHandler"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Handlers.WeaverInterceptorHandler.Invoke(System.Object[])">
            <summary>
            Invokes the current interceptor and returns the result.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Helpers.EnumerableHelper">
            <summary>
            Provides useful extension method(s) for mocking IQueryable implementations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.EnumerableHelper.ReturnsCollection``2(Telerik.JustMock.Expectations.Abstraction.IFunc{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns a enumerable collecton for the target query.
            </summary>
            <typeparam name="TArg">Argument type</typeparam>
            <typeparam name="TReturn">Return type for the collection</typeparam>
            <param name="funcExpectation">Defines the setup instance under which the collection will be set.</param>
            <param name="collection">Enumerable colleciton</param>
            <returns>Reference to assertable.</returns>
        </member>
        <member name="T:Telerik.JustMock.Helpers.FluentHelper">
            <summary>
            Contains fluent extensions for setting up or asserting mock expectations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Arrange``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">Mock type</typeparam>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="obj">
            Target instance.
            </param>
            <param name="expression">Target expression</param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.ArrangeSet``1(``0,System.Action{``0})">
            <summary>
            Setups target property set operation to act in a specific way.  
            <example>
            <code>
            Mock.ArrangeSet(() =&gt;; foo.MyValue = 10).Throws(new InvalidOperationException());
            </code>
            This will throw InvalidOperationException for when foo.MyValue is set with 10.
            </example>
            </summary>
            <typeparam name="T">Mock type</typeparam>
            <param name="obj">Target mock object</param>
            <param name="action">
            Target action
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Arrange``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">
            Return type for the target setup.
            </typeparam>
            <param name="obj">
            Target instance.
            </param>
            <param name="expression">Target expression</param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Asserts the specific call
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Asserts the specific call
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0,System.Linq.Expressions.Expression{System.Action{``0}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific call
            </summary>
            <param name="obj">Target mock object</param>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Raise``1(``0,System.Action{``0},System.EventArgs)">
            <summary>
            Raises the specified mocked event.
            </summary>
            <param name="obj">Target mock object</param>
            <param name="eventExpression">Event expresssion</param>
            <param name="args">Event argument</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Raise``1(``0,System.Action{``0},System.Object[])">
            <summary>
            Raises the specified mocked event.
            </summary>
            <param name="obj">Target mock object</param>
            <param name="eventExpression">Event expresssion</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.Assert``1(``0)">
            <summary>
            Asserts all expected calls that are marked as must or
            to be occurred a certain number of times.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="target">Target instance</param>
        </member>
        <member name="M:Telerik.JustMock.Helpers.FluentHelper.AssertAll``1(``0)">
            <summary>
            Asserts all expected setups.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Helpers.MultipleReturnValueChainHelper">
            <summary>
            Provides ability to chain Returns method that returns a single value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Helpers.MultipleReturnValueChainHelper.Returns``1(Telerik.JustMock.Expectations.Abstraction.IAssertable,``0)">
            <summary>
            Defines the return value for a sepecific method expecation.
            </summary>
            <param name="assertable">Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</param>
            <param name="value">any object value</param>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IMustBeCalled"/> interface</returns>
        </member>
        <member name="T:Telerik.JustMock.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ArgumentCountDoesNotMatch">
            <summary>
              Looks up a localized string similar to Argument count does not match. Expected {0} but was {1}..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ArrayCannotBeEmpty">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; array cannot be empty..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CallsShouldBeExecutedInOrder">
            <summary>
              Looks up a localized string similar to Call(s) should be executed in order they are expected.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CannotBeNull">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be null..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be null or empty..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CannotEnsureOnTargetCall">
            <summary>
              Looks up a localized string similar to Could not ensure call on {0}. Make sure it is a property and not readonly..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CanNotImplementInterfaceOnSealedType">
            <summary>
              Looks up a localized string similar to Could not implement interface on a sealed type..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CollectionCannotBeEmpty">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; collection cannot be empty..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CouldCreateSealedMockWhenProfilerNotEnabled">
            <summary>
              Looks up a localized string similar to Could not create mock from sealed class when profiler is not enabled..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CouldNotAssert">
            <summary>
              Looks up a localized string similar to Could not assert {0}..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CouldNotCallOriginalForAbstractMember">
            <summary>
              Looks up a localized string similar to Could not call base for abstract {0}. Either remove the Behavior.CallOriginal specifier or add a setup for the expected call..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CouldNotCreateMockFromTarget">
            <summary>
              Looks up a localized string similar to Could not create mock for sealed class when profiler is not enabled..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.CouldNotFindTargetMethod">
            <summary>
              Looks up a localized string similar to Could not resolve the target method; make sure that you have provided arguments correctly..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.DirectCallOnInterfaceNotSupported">
            <summary>
              Looks up a localized string similar to Direct call on interface is not supported..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.DuplicateExpectedMethod">
            <summary>
              Looks up a localized string similar to Your expectation contains method with same arguments..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ExpecationMustBeCalled">
            <summary>
              Looks up a localized string similar to Setup contains calls that are marked as &quot;MustBeCalled&quot; but actually never called..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ExpectationForMethodNotMet">
            <summary>
              Looks up a localized string similar to {0} method has fewer calls than originally expected..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ExpectationForPropertyNotMet">
            <summary>
              Looks up a localized string similar to Expectation for {0} property is not met properly. Check if the property is used according to its expectation..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ExpectedCallIsNeverInvoked">
            <summary>
              Looks up a localized string similar to The expected {0} is never called..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ExpectedValueNotGet">
            <summary>
              Looks up a localized string similar to Expected value is not get or queried for {0} property..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ExpectedValueNotSet">
            <summary>
              Looks up a localized string similar to Expected value is not set for {0} property..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.InvalidCall">
            <summary>
              Looks up a localized string similar to Invalid call..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.InvalidEventToMock">
            <summary>
              Looks up a localized string similar to Can&apos;t mock the expected event..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.InvalidInterception">
            <summary>
              Looks up a localized string similar to There were some problems intercepting the mock call. Optionally, please make sure that you have turned on JustMock&apos;s profiler while mocking concrete members..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.InvalidTarget">
            <summary>
              Looks up a localized string similar to Must provide a valid target..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ItemWithSpecifiedSourceAlreadyExists">
            <summary>
              Looks up a localized string similar to Item with specified source already exists..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.LambdaMustContainAValidMethod">
            <summary>
              Looks up a localized string similar to Lambda must contain a valid method to procceed..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.MatcherCountShouldEqualToArgumentCountForNonExpression">
            <summary>
              Looks up a localized string similar to Specified matchers should be equal to the arguments count for non-expression based calls (e.g. action calls in VB)..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.MethodNotArranged">
            <summary>
              Looks up a localized string similar to Can&apos;t call method(s) other than the ones arranged..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.MustBeArranged">
            <summary>
              Looks up a localized string similar to All calls on {0} should be arranged first..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.MustBeUsedWithFrameworkTypes">
            <summary>
              Looks up a localized string similar to Mock.Initialize() must be used with framework members and during test initailization..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.MustProvideAFullQualifiedName">
            <summary>
              Looks up a localized string similar to Must provide a full qualified name of the target to mock. Ex. DemoLib.Foo..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.NameCannotBeBlank">
            <summary>
              Looks up a localized string similar to Name cannot be blank..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.NoReturnIsSet">
            <summary>
              Looks up a localized string similar to No return value is set for {0} call..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.NoSetupFound">
            <summary>
              Looks up a localized string similar to {0} does not have a proper setup to verify..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.NotAValidArgumentType">
            <summary>
              Looks up a localized string similar to Not a valid argument type..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.NullValuedArgNotSupportedForNonPublicSetup">
            <summary>
              Looks up a localized string similar to Direct null valued argument for non-public member is not supported. Use ArgExpr.IsNull&lt;T&gt;() or other members from ArgExpr wrapper class to provide your specification..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ProfilerMustBeEnabledToMockTargetMethod">
            <summary>
              Looks up a localized string similar to Profiler must be enabled to mock/assert target {0} method..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ProfilerMustBeEnabledToUse">
            <summary>
              Looks up a localized string similar to Profiler must be enabled or installed to use  {0}..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ProfilerMustBeSupportedOrEnabled">
            <summary>
              Looks up a localized string similar to Profiler must be enabled or supported to mock the specified target..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.PropertyNotArranged">
            <summary>
              Looks up a localized string similar to Can&apos;t get/set other than the properties that are arranged..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ShouldHaveAValidPublicConstructor">
            <summary>
              Looks up a localized string similar to Target object should have a valid public constructor to mock..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ShouldOccurAtLeast">
            <summary>
              Looks up a localized string similar to Expected {0} call on the mock should occur at least {1}, but it was called {2} time(s)..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ShouldOccurAtleastOnce">
            <summary>
              Looks up a localized string similar to Expected {0} call on the mock should be at least once, but it was called {1} time(s)..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ShouldOccurAtMost">
            <summary>
              Looks up a localized string similar to Expected {0} call on the mock should occur at most {1}, but it was called {2} time(s)..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ShouldOccurExactly">
            <summary>
              Looks up a localized string similar to Expected {0} call on the mock should occur exactly {1}, but it was called {2} time(s)..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ShouldOccurNever">
            <summary>
              Looks up a localized string similar to Expected {0} call on the mock should be never, but it was called {1} time(s)..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.ShouldOccurOnce">
            <summary>
              Looks up a localized string similar to Expected {0} call on the mock should be once, but it was called {1} time(s)..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.StaticFinalMockingNotSupported">
            <summary>
              Looks up a localized string similar to Static or final method mocking is not supported in silverlight..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Messages.TargetMethodMustBeMockedInOrderToAssert">
            <summary>
              Looks up a localized string similar to Target method must be mocked in order assert..
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Mock">
            <summary>
            Mock entry point for settting up expection, creating mock objects and verfiying results.
            </summary>
            <summary>
            Mock entry point for settting up expection, creating mock objects and verfiying results.
            </summary>
            <summary>
            Mock entry point for settting up expection, creating mock objects and verfiying results.
            </summary>
            <summary>
            Entry point for setting up and asserting mocks.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``5(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``6(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``6(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``7(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``7(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``8(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``8(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``9(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``9(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``6(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``5(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``7(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``6(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``8(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``7(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``9(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``8(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``10(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``9(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Telerik.JustMock.Mock"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.DoNotUseProfiler">
            <summary>
            Tells JustMock not to use profiler features.
            <remarks>When used JustMock will ignore the profiler for current thread or test class scope.</remarks>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Setups the target mock call with user expectation.
            </summary>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="expression">
            Provide the target method call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``2(``0,System.Func{``0,``1})">
            <summary>
            Setups the target mock call with user expectation.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="obj">
            Target instance.
            </param>
            <param name="func">
            Expression delegate to the target call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``1">
            <summary>
            Initializes interceptor for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize(System.Type)">
            <summary>
            Initializes interceptor  for the specified type.
            </summary>
            <remarks>
            The method is useful for setting up non default framework types during class initialization
            as well as pre-intercepting concrete members for future mocking.
            </remarks>
            <param name="targetType">Target type</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange``2(System.Func{``1})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <typeparam name="TResult">
            Return type for the target setup.
            </typeparam>
            <param name="func">
            Expression delegate to the target call
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Arrange(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Setups the target call to act in a specific way.
            </summary>
            <param name="expression">
            Target expression
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.ArrangeSet(System.Action)">
            <summary>
            Setups target property set operation to act in a specific way.  
            <example>
            <code>
            Mock.ArrangeSet(() =&gt;; foo.MyValue = 10).Throws(new InvalidOperationException());
            </code>
            This will throw InvalidOperationException for when foo.MyValue is set with 10.
            </example>
            </summary>
            <param name="action">
            Target action
            </param>
            <returns>
            Reference to <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> to setup the mock.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <typeparam name="TReturn">Return type for the assert expression</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Args)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <typeparam name="TReturn">Return type for the assert expression</typeparam>
            <param name="args">Assert argument</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Occurs)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Target expression</param>
            <param name="occurs">Specifies how many times a call has occurred</param>
            <typeparam name="TReturn">Return type for the target call</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``2(``0,System.Func{``0,``1})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="obj">Target instance</param>
            <param name="func">Contains the target mock call</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``2(``0,System.Func{``0,``1},Telerik.JustMock.Occurs)">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="target">Target instance</param>
            <param name="occurs">Specifies how many times a call has occurred</param>
            <param name="func">Contains the target mock call</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Asserts a specific call from expression.
            </summary>
            <param name="expression">Action expression defining the action to verify.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Args)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="args">Specifies to ignore any arguments during assertion.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert(System.Linq.Expressions.Expression{System.Action},Telerik.JustMock.Args,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specified call from expression.
            </summary>
            <param name="expression">The action to verify.</param>
            <param name="args">Specifies to ignore any arguments during assertion.</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertSet(System.Action)">
            <summary>
            Asserts the specific property set operation.
            </summary>
            <param name="action">Action defining the set operation</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertSet(System.Action,Telerik.JustMock.Occurs)">
            <summary>
            Asserts the specific property set operation.
            </summary>
            <param name="action">Action defining the set operation</param>
            <param name="occurs">Specifies the number of times a mock call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Assert``1(``0)">
            <summary>
            Asserts all expected calls that are marked as must or
            to be occurred a certain number of times.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="mocked">Target instance</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertAll``1(``0)">
            <summary>
            Asserts all expected setups.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Create a mocked instance from specified real constructor.
            </summary>
            <typeparam name="T">Target type for the mocked instance</typeparam>
            <param name="expression">Target expression for specifying the new type.</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Linq.Expressions.Expression{System.Func{``0}},Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from specified real constructor.
            </summary>
            <typeparam name="T">Target type for the mocked instance</typeparam>
            <param name="expression">Target expression for specifying the new type.</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Action{Telerik.JustMock.Abstraction.IFluentConfig{``0}})">
            <summary>
            Creates a mocked instance from settings specified in the lambda.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="settings">Specifies mock settings</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Behavior,System.Object[])">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <typeparam name="T">Type of the mock</typeparam>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,System.Object[])">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="target">Target to mock</param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic``1">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <remarks>
            Considers all public members of the class. To mock private member,
            please use Mock.NonPublic 
            </remarks>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic``1(Telerik.JustMock.Behavior)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <remarks>
            Considers all public members of the class. To mock private member,
            please use the private interface Mock.NonPublic
            </remarks>
            <param name="behavior">
            Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/>
            </param>
            <typeparam name="T">
            Target type
            </typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic(System.Type,Telerik.JustMock.StaticConstructor)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <param name="staticType">Static type</param>
            <param name="staticConstructor">Defines the behavior of the static constructor</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic(System.Type)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <param name="staticType">Static type</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic(System.Type,Telerik.JustMock.Behavior)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <param name="targetType">Target type</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
        </member>
        <member name="M:Telerik.JustMock.Mock.SetupStatic(System.Type,Telerik.JustMock.Behavior,Telerik.JustMock.StaticConstructor)">
            <summary>
            Setups the target for mocking all static calls.
            </summary>
            <param name="targetType">Target type</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <param name="staticConstructor">Defines the behavior of the static constructor</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Constructor)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(Telerik.JustMock.Constructor,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <returns>Mock instance</returns>
            <typeparam name="T">Target type</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,Telerik.JustMock.Constructor,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="targetType">Target to mock</param>
            <param name="constructor">
            Specifies whether to call the base constructor
            </param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.String)">
            <summary>
            Creates a mocked instance from a internal class.
            </summary>
            <param name="fullName">Fully qualified name of the target type.</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.String,Telerik.JustMock.Behavior)">
            <summary>
            Creates a mocked instance from an internal class.
            </summary>
            <param name="fullName">Fully qualified name of the target type.</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.String,System.Action{Telerik.JustMock.Abstraction.IFluentConfig})">
            <summary>
            Creates a mocked instance from an internal class.
            </summary>
            <param name="fullName">Fully qualified name of the target type.</param>
            <param name="settings">Settings for the mock</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,System.Action{Telerik.JustMock.Abstraction.IFluentConfig})">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <param name="target">Target type to mock</param>
            <param name="settings">Mock settings</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create(System.Type,Telerik.JustMock.Behavior,System.Object[])">
            <summary>
            Creates a mock instance from a given type.
            </summary>
            <param name="target">Mocking type</param>
            <param name="behavior">Specifies behavior of the mock. Default is <see cref="F:Telerik.JustMock.Behavior.Loose"/></param>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.Create``1(System.Object[])">
            <summary>
            Creates a mocked instance from a given type.
            </summary>
            <typeparam name="T">Mocked object type.</typeparam>
            <param name="args">Constructor arguments</param>
            <returns>Mock instance</returns>
        </member>
        <member name="M:Telerik.JustMock.Mock.AssertInternal(Telerik.JustMock.Occurs)">
            <summary>
            Asserts current mocked method.
            </summary>
            <param name="occurs">Specifies number of times the call should occur.</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Raise(System.Action,System.EventArgs)">
            <summary>
            Raises the specified mocked event.
            </summary>
            <param name="eventExpression">Event expression</param>
            <param name="args">Event argument</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Raise(System.Action,System.Object[])">
            <summary>
            Raises the specified mocked event.
            </summary>
            <param name="eventExpression">Event expression</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Initialize``1(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Replace``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Replaces the body of target mscorlib member with mock handlers.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Mock.Partial``1">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="M:Telerik.JustMock.Mock.Partial(System.Type)">
            <summary>
            Pre-Intercepts the ahead of execution.
            </summary>
            <typeparam name="T">Target type containing the mocking member</typeparam>
        </member>
        <member name="P:Telerik.JustMock.Mock.IsProfilerEnabled">
            <summary>
            Gets a value indicating whether the JustMock profiler is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Mock.NonPublic">
            <summary>
            Returns interface defining non-public expectations.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockAssertionException">
            <summary>
            Exception thrown after a mock assertion is failed.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockAssertionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockAssertionException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockAssertionException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Telerik.JustMock.MockAssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockAssertionException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Telerik.JustMock.MethodWeaver`1">
            <summary>
            Extracts and weaves methods from mock expression.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MethodWeaver`1.#ctor(Telerik.JustMock.MockExpression{`0},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MethodWeaver`1"/> class.
            </summary>
            <param name="expression">Target expression</param>
            <param name="targetType">Target type</param>
        </member>
        <member name="M:Telerik.JustMock.MockedEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockedEvent"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockedEvent.#ctor(System.Delegate,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockedEvent"/> class.
            </summary>
            <param name="delegate">Target event expression</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Telerik.JustMock.MockedEvent.#ctor(System.Object,System.Delegate,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockedEvent"/> class.
            </summary>
            <param name="target">Mock target</param>
            <param name="delegate">Target event expression</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Telerik.JustMock.MockedEvent.Raise">
            <summary>
            Raises the target event.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockInitializer">
            <summary>
            Class definining members for partially setting up mock on a call.
            </summary>
            <summary>
            Mock interceptor initializer.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``6(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``5(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``7(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``6(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``8(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``7(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``9(System.Linq.Expressions.Expression{Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``8(System.Linq.Expressions.Expression{Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.#ctor(System.Type)">
            <summary>
            Creates new Instance of  <see cref="T:Telerik.JustMock.MockInitializer"/> class.
            </summary>
            <param name="targetType">Target type for injecting interceptor.</param>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Initializes the mock interceptor.
            </summary>
            <param name="expression">Target expression containing the member to initialize.</param>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer.For``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MsCorlibInitializer.#ctor(System.Type)">
            <summary>
            Initializes the instance of <see cref="T:Telerik.JustMock.MsCorlibInitializer"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MsCorlibInitializer.#ctor(Telerik.JustMock.MockExpression)">
            <summary>
            Initializes the instance of <see cref="T:Telerik.JustMock.MsCorlibInitializer"/> class.
            </summary>
            <param name="expression">Target expression</param>
        </member>
        <member name="M:Telerik.JustMock.MsCorlibInitializer.In``1">
            <summary>
            Initializes all method for the target mscorlib member.
            </summary>
            <typeparam name="T">Container type</typeparam>
        </member>
        <member name="T:Telerik.JustMock.ParallelMethodIterator">
            <summary>
            Parallely iterates all methods for a specific type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.ParallelMethodIterator.ReplyForAll">
            <summary>
            Queues methods to execute parallely and executes the associated action.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.StaticConstructor">
            <summary>
            Defines behavior of the static constructor.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.StaticConstructor.NonMocked">
            <summary>
            Defines that the static constructor is not mocked.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.StaticConstructor.Mocked">
            <summary>
            Defines that is static constructor is mocked.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Wait">
            <summary>
            Specifies the duration to wait before executing an event.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Wait.For(System.Int32)">
            <summary>
            Specifies the number of seconds to wait for executing an event.
            </summary>
            <param name="seconds">Seconds to wait</param>
        </member>
        <member name="M:Telerik.JustMock.Wait.For(System.TimeSpan)">
            <summary>
            Specifies the number of seconds to wait for executing an event.
            </summary>
            <param name="duration">Time duration to wait</param>
        </member>
        <member name="P:Telerik.JustMock.WeavedMethod.Arguments">
            <summary>
            Gets the array of member arguments.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.WeavedMethod.MatcherPositions">
            <summary>
            Gets the matcher positions.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Specification.Abstraction.ISpecification">
            <summary>
            Entry point interface for validating specification.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Specification.Abstraction.ISpecification.IsSatisfiedFor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Validates a specification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Specification.WeaverSpecification.IsSatisfiedFor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Validates a specification.
            </summary>
            <returns>
            A boolean value indicating that the specification is satisfied.
            </returns>
        </member>
        <member name="M:Telerik.JustMock.Weaver.Utility.GetGenericTypeKeys(System.Reflection.MethodBase)">
            <summary>
            Gets the unique type keys for the target method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.Utility.GetGenericTypeKeys(System.Type,System.Reflection.MethodBase)">
            <summary>
            Gets the unique type keys for the target method.
            </summary>
            <param name="targetType">Target type</param>
            <param name="methodBase">Target methodInfo</param>
            <returns>Array of generic parameter names</returns>
        </member>
        <member name="M:Telerik.JustMock.Weaver.Utility.GetGenericMethodKeys(System.Reflection.MethodInfo)">
            <summary>
            Helper method. The result is used to define whether the dynamic delegate is generic type.
            </summary>
            <param name="methodInfo"></param>
            <returns>Array of generic parameter names</returns>
        </member>
        <member name="M:Telerik.JustMock.Weaver.Utility.GetMemberDefination(System.Type,System.Reflection.MethodBase)">
            <summary>
            Gets the orginal method defination.
            </summary>
            <param name="target">Target type</param>
            <param name="methodBase">Specified method</param>
            <returns>Orignal method defintation</returns>
        </member>
        <member name="M:Telerik.JustMock.Weaver.WeaverInterceptorBuilder.DefineInterceptor(System.Reflection.MethodBase,System.Reflection.Emit.FieldBuilder,System.Type[])">
            <summary>
            Creates the interceptor
            </summary>
            <param name="methodBase">Target method type, must be a normalized</param>
            <param name="fldInterceptor">Interceptor field</param>
            <param name="parameters">Parameter types</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Abstraction.IInvocation">
            <summary>
            Interface describing method invocation details.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.IReturnValueInvocation">
            <summary>
            Internally used for handling return value on invocation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.IReturnValueInvocation.ReturnValue">
            <summary>
            Gets the return value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Abstraction.IInvocation.SetReturn(System.Object)">
            <summary>
            Sets the return value for the interception.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Abstraction.IInvocation.Continue">
            <summary>
            Exectues the orignal method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Abstraction.IInvocation.DeclaringType">
            <summary>
            Gets the declaring type of the invocation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Abstraction.IInvocation.Target">
            <summary>
            Gets the invocation target
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Abstraction.IInvocation.Arguments">
            <summary>
            Gets the arguments for invoked method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Abstraction.IInvocation.Method">
            <summary>
            Gets the invoked member itself.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Abstraction.IProxy">
            <summary>
            Marker interface for identifying the proxy.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Abstraction.IFactory">
            <summary>
            Interface containing proxy settings elements.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Abstraction.IFactory.CallingConstructor">
            <summary>
            Defines the setttings for the target proxy constructor.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Argument">
            <summary>
            Wrapper for invocation arguments.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Argument.#ctor(System.Object,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.Argument"/> class.
            </summary>
            <param name="value">Defines the value of the argument</param>
            <param name="type">Defines the type of the argument</param>
            <param name="isOut">Defines if the argument has an output modifier</param>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Argument.Value">
            <summary>
            Gets the argument value/ Set it for output argument.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Argument.Type">
            <summary>
            Gets type of the argument.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Argument.IsOut">
            <summary>
            Gets <value>true</value> for output param.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.AutoClass">
            <summary>
             Class used for creating proxy on top of interface.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Binding">
            <summary>
            Defines method bindings.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.DynamicProxy.Binding.Private">
            <summary>
            Private binding
            </summary>
        </member>
        <member name="F:Telerik.JustMock.DynamicProxy.Binding.Public">
            <summary>
            Public binding.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Enhancers.BasicEnhancer">
            <summary>
             Contains helper methods for various repeatative tasks.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Enhancers.BasicEnhancer.GetRealType(System.Type)">
            <summary>
            Gets the original type omitting any out/ref initials.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings">
            <summary>
            Defines fluent memeber for defining the proxy.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings.Register(Telerik.JustMock.DynamicProxy.Abstraction.IInterceptor)">
            <summary>
            Define the interceptor to hook.
            </summary>
            <param name="interceptor"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings.CallConstructor(System.Object[])">
            <summary>
            Setups the target constructor to be called.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings.CallConstructor(System.Boolean)">
            <summary>
            Setups the target default constructor to be called.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings.IncludeObjectOverrides">
            <summary>
            Defines that object overrides like "Equals", "ToString", "GetHashCode" should
            be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings.Implement(System.Type)">
            <summary>
            Implements the specified interface.
            </summary>
            <param name="interface">Type of target interface.</param>
            <returns>Referece to <see cref="T:Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings"/></returns>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy">
            <summary>
            Fluent proxy
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy"/> class.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy.Register(Telerik.JustMock.DynamicProxy.Abstraction.IInterceptor)">
            <summary>
            Define the interceptor to hook.
            </summary>
            <param name="interceptor"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy.CallConstructor(System.Object[])">
            <summary>
            Setups the target constructor to be called.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy.CallConstructor(System.Boolean)">
            <summary>
            Setups the target default constructor to be called.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy.IncludeObjectOverrides">
            <summary>
            Defines that object overrides like "Equals", "ToString", "GetHashCode" should
            be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy.Implement(System.Type)">
            <summary>
            Implements the specified interface.
            </summary>
            <param name="interface">Type of target interface.</param>
            <returns>Referece to <see cref="T:Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings"/></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Fluent.FluentProxy.NewInstance">
            <summary>
            Creates the new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.WrapArgsInObjArray(System.Type[],System.Int32)">
            <summary>
            Decalares and initializes a variable with parameter values.
            </summary>
            <param name="parameterTypes"></param>
            <param name="offset">Starting index for the provided types.</param>
            <returns><see cref="T:System.Reflection.Emit.LocalBuilder"/></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Type)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
            <param name="code"></param>
            <param name="method"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.Emit(System.Reflection.Emit.OpCode)">
            <summary>
            Puts the specific instruction on to MSIL stack
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.CopyToLocalArray(System.Type[])">
            <summary>
            Declares and initializes a variable with the given type array.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.DeclareTypeArrayLocal(System.Type[])">
            <summary>
            Dynamically declares array of types from the argument.
            </summary>
            <param name="parameters">Parameters type</param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.UnboxIfReq(System.Reflection.MethodInfo)">
            <summary>
            Un-boxes the return type of the specified method when required.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.EmitOutParameter(System.Type)">
            <summary>
            Emits out parameter
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.EmitObjectRef(System.Type)">
            <summary>
            Emits set for out parameter.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ILEmitter.ThrowException(System.Type,System.String)">
            <summary>
            Throws exception with for the given type.
            </summary>
            <param name="expectionTarget">Target type for the exception.</param>
            <param name="message">Message that will be thrown for the exception.</param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.MethodEmitter.#ctor(Telerik.JustMock.DynamicProxy.TypeEmitter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.MethodEmitter"/> class.
            </summary>
            <param name="emitter">Contains the Type detail udner which methods should be emitted.</param>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.MethodInvocation">
            <summary>
            MethodInovcation entry-point class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.MethodInvocation.#ctor(System.Object,System.Reflection.MethodInfo,Telerik.JustMock.DynamicProxy.Argument[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.MethodInvocation"></see> class.
            </summary>
            <param name="target">Target instance</param>
            <param name="method">Target method</param>
            <param name="args">Invocation arguments</param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.MethodInvocation.SetReturnInternal``1(``0)">
            <summary>
            Sets the return value from interceptor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.MethodInvocation.SetReturn(System.Object)">
            <summary>
            Sets the return value for the interception.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.MethodInvocation.Continue">
            <summary>
            Continues the execution flow to the next interceptor (if any), or  to the 
            main method and cascade the changes to the main interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.MethodInvocation.ExpandArguments(System.Reflection.MethodInfo)">
            <summary>
            Expands the specified methods arguments
            </summary>
            <param name="mi">Target method</param>
            <returns>Expanded list of arguments</returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.MethodInvocation.FindExtendedMethod(System.Reflection.MethodInfo,System.Collections.Generic.IList{System.Type})">
            <summary>
            Tries find the specified method.
            </summary>
            <param name="methodInfo">Similar method to find.</param>
            <param name="types">List of parameter types.</param>
            <returns>Target method</returns>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.MethodInvocation.Name">
            <summary>
            Gets the name of the invocation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.MethodInvocation.Index">
            <summary>
            Gets or set the current interceptor index
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.MethodInvocation.DeclaringType">
            <summary>
            Gets the declaring type.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.MethodInvocation.Target">
            <summary>
            Gets the target instance
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.MethodInvocation.Arguments">
            <summary>
            Gets the arguments for current invocation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.MethodInvocation.InvokeBase">
            <summary>
            Gets or sets a value indicating whether or not the proxy
            should call the base method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.MethodInvocation.Method">
            <summary>
            Gets the name of callee
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.MethodInvocation.ReturnValue">
            <summary>
            Gets the user set return value for the current invocation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.Proxy">
            <summary>
            Entry-point for creating proxy from a given type.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Proxy.Create``1(Telerik.JustMock.DynamicProxy.Abstraction.IInterceptor,System.Object[])">
            <summary>
             Creates the proxy for the specified interface.
            </summary>
            <param name="interceptor"></param>
            <param name="args"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Proxy.Create(System.Type,Telerik.JustMock.DynamicProxy.Abstraction.IInterceptor,System.Object[])">
            <summary>
            Creates a new proxy from the specified type
            </summary>
            <param name="target"></param>
            <param name="interceptor"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Proxy.Create``1(System.Action{Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings})">
            <summary>
            Creates a new proxy with specific settings.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Proxy.Create(System.Type,System.Action{Telerik.JustMock.DynamicProxy.Fluent.Abstraction.IFluentSettings})">
            <summary>
            Creates a new proxy with specific settings.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.Proxy.InterfacesToImplement">
            <summary>
            Gets or set the array for interfaces to implement.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.ProxyFactory">
            <summary>
            Proxy factory.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxyFactory.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.ProxyFactory"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxyFactory.IncludeObjectOverrides">
            <summary>
            Specifies to include object overrides in the target proxy.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxyFactory.Register(Telerik.JustMock.DynamicProxy.Abstraction.IInterceptor)">
            <summary>
            Appends a new interceptor to the invocation list.
            </summary>
            <param name="interceptor"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxyFactory.Implement(System.Type)">
            <summary>
            Implements the specified interface to the target proxy.
            </summary>
            <param name="interface"></param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxyFactory.Create">
            <summary>
             Creates the new instance of the proxy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.ProxyFactory.CallingConstructor">
            <summary>
            Gets/Sets the initializing contructor for the proxy.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.DynamicProxy.ProxyFactory`1">
            <summary>
             Factory class for creating the proxy.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxyFactory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.ProxyFactory`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.ProxyFactory`1.Create">
            <summary>
            Creates a new proxy from with the defined settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.TypeEmitter.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.TypeEmitter"/> class.
            </summary>
            <param name="target">Target type</param>
            <param name="incldueObjectOverrides">Specifies to include object overrides</param>
            <param name="mockedConstructor">Specifies if the constructor is mocked</param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.TypeEmitter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.DynamicProxy.TypeEmitter"/> class.
            </summary>
            <param name="target">Target type</param>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.TypeEmitter.CreateType">
            <summary>
            Creates the underlying type.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.TypeEmitter.Interceptors">
            <summary>
             Gets the interceptor associated with this type.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.DynamicProxy.TypeEmitter.Builder">
            <summary>
            Gets the typebuilder associatedw the emitter.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.DynamicProxy.Utility.ToTypeArray(System.Reflection.ParameterInfo[])">
            <summary>
             Converts the <see cref="T:System.Reflection.ParameterInfo"/> array to its type array form.
            </summary>
            <param name="parameterInfos"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.ActionExpectation">
            <summary>
            Defines action related setups.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.CommonExpectation`1">
            <summary>
            Implements common expecations.
            </summary>
            <summary>
            Implements common expecations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``1(System.Action{``0})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``2(System.Action{``0,``1})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``3(System.Action{``0,``1,``2})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``4(System.Action{``0,``1,``2,``3})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``5(Telerik.JustMock.Action{``0,``1,``2,``3,``4})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``6(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``7(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``8(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``9(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``10(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``11(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``12(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``13(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``14(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``15(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``16(Telerik.JustMock.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
             Specifies the delegate that will execute for the expected method.
            </summary>
             <typeparam name="T1">Type of the first parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T2">Type of the second parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T3">Type of the third parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T4">Type of the fourth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T5">Type of the fifth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T6">Type of the sixth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T7">Type of the seventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T8">Type of the eighth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T9">Type of the ninth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T10">Type of the tenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T11">Type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T12">Type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T13">Type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T14">Type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T15">Type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
             <typeparam name="T16">Type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            	<param name="action">Target action delegate to execute as method body</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.#ctor(Telerik.JustMock.Setup.MethodCall)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> class.
            </summary>
            <param name="methodContainer">Contains method details.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead(System.Action)">
            <summary>
            Defines the body of the expected method that will be executed instead of the orginal method body.
            </summary>
            <param name="action">delegate the method body</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoInstead``1(``0)">
            <summary>
            Specifies the delegate that will execute for the expected method.
            </summary>
            <param name="delegate">Target delegate to evaluate.</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises(System.Action,System.Object[])">
            <summary>
             Raises the expected with sepecic arguments
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises(System.Action,System.EventArgs)">
            <summary>
             Raises the expected event with provided <see cref="T:System.EventArgs"/>.
            </summary>
            <param name="eventExpression"></param>
            <param name="args">Event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``1(System.Action,System.Func{``0,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">Function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``2(System.Action,System.Func{``0,``1,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``3(System.Action,System.Func{``0,``1,``2,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Raises``4(System.Action,System.Func{``0,``1,``2,``3,System.EventArgs})">
            <summary>
             Raises the expected event for the setup.
            </summary>
            <param name="eventExpression"></param>
            <param name="func">An function that will be used to construct event arguments</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws(System.Exception)">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws``1">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Throws``1(System.Object[])">
            <summary>
            Throws a the specified expection for target call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.CallOriginal">
            <summary>
            Use it to call the real implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.DoNothing">
            <summary>
             Specfies call a to step over.
            </summary>
            <remarks>
            For loose mocks by default the behavior is step over.
            </remarks>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.MustBeCalled">
            <summary>
            Specifies that the mock call should be invoked to pass <see cref="M:Telerik.JustMock.Mock.Assert``1(``0)"/>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.Occurs(System.Int32)">
            <summary>
            Specifies how many times the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursAtLeast(System.Int32)">
            <summary>
            Specifies how many times atleast the call should occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursAtMost(System.Int32)">
            <summary>
            Specifies how many times maximum the call can occur.
            </summary>
            <param name="numberOfTimes">Specified number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursOnce">
            <summary>
            Specifies that the call must occur once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.OccursNever">
            <summary>
            Specifies that the call must never occur.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.InSequence">
            <summary>
            Specifies that justmock should invoke different mock instance for each setup.
            </summary>
            <remarks>
            When this modifier is applied
            for similar type call, the flow of setups will be maintained.
            </remarks>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.InOrder">
            <summary>
            Specifies a call should occur in a specific order.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.CommonExpectation`1.IgnoreInstance">
            <summary>
            Defines that the expectation should occur for all instance.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Expectations.CommonExpectation`1.ExpectationContainer">
            <summary>
            Speficifies the container that holds the current instance.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Expectations.CommonExpectation`1.MethodContainer">
            <summary>
            Gets the current method container
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.ActionExpectation.#ctor(Telerik.JustMock.Setup.MethodCall)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Expectations.ActionExpectation"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.ActionExpectation.IgnoreArguments">
            <summary>
            Specifies to ignore any argument for the target call.
            </summary>
            <returns>Func or Action Container</returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.FuncExpectation`1">
            <summary>
            Defines the expectation for a sepcific method.
            </summary>
            <summary>
            Implements common expecations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.#ctor(Telerik.JustMock.Setup.MethodCall)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.JustMock.Expectations.FuncExpectation`1"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(`0)">
            <summary>
            Defines the return value for a sepecific method expecation.
            </summary>
            <param name="value">any object value</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(System.Func{`0})">
            <summary>
            Specifies the function to evaluate and return.
            </summary>
            <param name="func">Target function to evaluate</param>
            <returns>Refarence to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns(System.Func{`0,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.IgnoreArguments">
            <summary>
            Specifies to ignore any argument for the target call.
            </summary>
            <returns>Func or Action Container</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``1(System.Func{``0,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``2(System.Func{``0,``1,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``3(System.Func{``0,``1,``2,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``4(System.Func{``0,``1,``2,``3,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``5(Telerik.JustMock.Func{``0,``1,``2,``3,``4,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``6(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``7(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``8(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``9(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``10(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``11(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``12(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``13(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``14(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``15(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.FuncExpectation`1.Returns``16(Telerik.JustMock.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,`0})">
            <summary>
            Specifies the delegate that will execute and return the value for the expected member.
            </summary>
            <typeparam name="T1">Type of the first parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T2">Type of the second parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T3">Type of the third parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T5">Type of the fifth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T6">Type of the sixth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T7">Type of the seventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T8">Type of the eighth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T9">Type of the ninth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T10">Type of the tenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T11">Type of the eleventh parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T12">Type of the twelveth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T13">Type of the thirteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T14">Type of the fourteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T15">Type of the fifteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <typeparam name="T16">Type of the sixteenth parameter of the anonymous method that this delegate encapsulates</typeparam>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IAssertable"/> interface.</returns>
        </member>
        <member name="T:Telerik.JustMock.Func`6">
             <summary>
             Encapsulates a method that has 5 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`7">
             <summary>
             Encapsulates a method that has 6 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`8">
             <summary>
             Encapsulates a method that has 7 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`9">
             <summary>
             Encapsulates a method that has 8 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`10">
             <summary>
             Encapsulates a method that has 9 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`11">
             <summary>
             Encapsulates a method that has 10 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`12">
             <summary>
             Encapsulates a method that has 11 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`13">
             <summary>
             Encapsulates a method that has 12 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`14">
             <summary>
             Encapsulates a method that has 13 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`15">
             <summary>
             Encapsulates a method that has 14 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`16">
             <summary>
             Encapsulates a method that has 15 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="T:Telerik.JustMock.Func`17">
             <summary>
             Encapsulates a method that has 16 parameters and returns a value of the type specified by <typeparamref name="TResult"/> parameter.
             </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates</typeparam>
            <typeparam name="TResult">Type of the return value of the method that this delegate encapsulates.</typeparam>
        </member>
        <member name="M:Telerik.JustMock.InternalHelpers.ILGeneratorHelper.DeclareLocalWith(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>
            Declares and initializes a variable with the given type array.
            </summary>
            <param name="ilGenerator"></param>
            <param name="types"></param>
        </member>
        <member name="T:Telerik.JustMock.Instruction">
            <summary>
            Defines the nature for the mock call.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Instruction.Execute">
            <summary>
            Specifies that call is for executing the setups
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Instruction.Arrange">
            <summary>
            Sepcifies that call is made for arranging the setup
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Instruction.Assert">
            <summary>
            Specifies that call is made for asserting the expectation.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Interceptors.InterceptorEventArgs">
            <summary>
            Inceptor event args.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Interceptors.InterceptorEventArgs.Result">
            <summary>
            Gets or Sets the result.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Interceptors.InterceptorEventArgs.Target">
            <summary>
            Gets / Sets the target type.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockClassAttribute">
            <summary>
            Attribute for mocking mscorlib members.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockExpression">
            <summary>
            Defines the mocking expression.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockExpression.MemberInfo">
            <summary>
            Gets or Sets the memeber info.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockExpression.Method">
            <summary>
            Gets <see cref="T:System.Reflection.MethodInfo"/> for current mock expression.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.MockExpression.Target">
            <summary>
            Gets or Sets the type for the target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockExpression.NodeType">
            <summary>
            Gets the current expression node type.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockExpression`1">
            <summary>
            Defines the Mocking expression with specific delegate.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockExpression`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.MockExpression`1.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits <see cref="T:System.Linq.Expressions.MemberExpression"/>
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.MockExpression`1.Expression">
            <summary>
            Gets or sets the current expression;
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockExpression`1.Object">
            <summary>
            Gets or sets the object instance for the target expression call.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockInitializer`1">
            <summary>
            Class definining members for partially setting up mock on a call.
            </summary>
            <summary>
            Class definining members for partially setting up mock on a call.
            </summary>
            <typeparam name="T">Target</typeparam>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Telerik.JustMock.MockInitializer"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Setups the mock code interceptor against a specific method.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``3(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``4(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,``2,``3}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``5(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``4(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``6(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``5(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3,``4}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``7(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``6(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3,``4,``5}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``8(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``7(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``9(System.Linq.Expressions.Expression{Telerik.JustMock.Func{`0,``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInitializer`1.For``8(System.Linq.Expressions.Expression{Telerik.JustMock.Action{`0,``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Initializes the mock interceptor.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.RangeKind">
            <summary>
             Defines the kind of range value to consider.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.RangeKind.Exclusive">
            <summary>
            Does not consider first and last value.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.RangeKind.Inclusive">
            <summary>
            Considers the First and last value.
            </summary>  
        </member>
        <member name="M:Telerik.JustMock.RangeExpression`1.#ctor">
            <summary>
            Creates a new instance of <see ref="RangeExpression"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.RangeExpression`1.ToExpresson">
            <summary>
            Converts the range values to its equivalant expresson form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.RangeExpression`1.op_Implicit(Telerik.JustMock.RangeExpression{`0})~System.Linq.Expressions.Expression{System.Predicate{`0}}">
            <summary>
            Implictly converts the range values to its equivalant expression form.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.RangeExpression`1.From">
            <summary>
            Gets or Set starting value
            </summary>
        </member>
        <member name="P:Telerik.JustMock.RangeExpression`1.To">
            <summary>
            Gets or Sets the end value
            </summary>
        </member>
        <member name="P:Telerik.JustMock.RangeExpression`1.Kind">
            <summary>
            Gets/Set a value defining the boundary.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Setup.Abstraction.IExecutionTracer">
            <summary>
            Defines members to trace method calls.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Abstraction.IExecutionTracer.NumerOfTimesExecuted">
            <summary>
            Gets/ Sets number of times a method is excuted.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Setup.EventContainer">
            <summary>
            Contains subscribed event details.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.EventContainer.#ctor(System.Reflection.EventInfo,System.Object[])">
            <summary>
            Creates a new instance of <see cref="T:Telerik.JustMock.Setup.EventContainer"/> class
            </summary>
            <param name="eventInfo">Delegate to be inoked</param>
            <param name="args">arguments that will be passed dynamically to the delegate</param>
        </member>
        <member name="M:Telerik.JustMock.Setup.EventContainer.#ctor(System.Reflection.EventInfo,System.Delegate)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.JustMock.Setup.EventContainer"/> class
            </summary>
            <param name="eventInfo">Delegate to be inoked</param>
            <param name="eventArgs">Custom event arguments.</param>
        </member>
        <member name="M:Telerik.JustMock.Setup.EventContainer.DynamicInvoke(Telerik.JustMock.Setup.Container,System.Object,System.Object[])">
            <summary>
            invokes the delegates with params, for a specific context.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.EventContainer.Arguments">
            <summary>
            contains the arguments for the raised event.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Setup.ArgumentContainer`1">
            <summary>
            Generic class for <see cref="T:Telerik.JustMock.Setup.ArgumentContainer"/>
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Setup.ArgumentContainer">
            <summary>
            Contains the details for the method argument.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.ArgumentContainer.#ctor">
            <summary>
            Initailizes the new instance of <see cref="T:Telerik.JustMock.Setup.ArgumentContainer"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.ArgumentContainer.#ctor(System.Predicate{System.Object})">
            <summary>
            Creates a new instance of <see cref="T:Telerik.JustMock.Setup.ArgumentContainer"/> class.
            </summary>
            <param name="condition">Expression condition</param>
        </member>
        <member name="M:Telerik.JustMock.Setup.ArgumentContainer.#ctor(System.Delegate)">
            <summary>
             Initailizes the instance of <see cref="T:Telerik.JustMock.Setup.ArgumentContainer"/> class.
            </summary>
            <param name="delegate"></param>
        </member>
        <member name="M:Telerik.JustMock.Setup.ArgumentContainer.IsMatched(System.Object)">
            <summary>
            Checks if the value matches the stored condition.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.ArgumentType">
            <summary>
            Gets the argument type.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.IsDiffered">
            <summary>
            Gets or sets if an argment value is differed by lazy calls.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.Value">
            <summary>
            Gets or Sets value from the underlying argument.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.IsOutput">
            <summary>
            Gets/Sets if the argument is output type.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.Ignore">
            <summary>
            Gets / Set if value should be ignored.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.IsMatcher">
            <summary>
            Gets or Sets if an argument is matcher expression.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.IsParam">
            <summary>
            Get or sets a value indicating it is a param type argument.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.Arguments">
            <summary>
            Gets or sets nested arguments.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.ArgumentContainer.Delegate">
            <summary>
            Gets the current condition delegate.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.ArgumentContainer`1.#ctor(System.Delegate)">
            <summary>
             Initailizes the  new instance of <see cref="T:Telerik.JustMock.Setup.ArgumentContainer"/> class.
            </summary>
            <param name="delegate"></param>
        </member>
        <member name="M:Telerik.JustMock.Setup.ArgumentContainer`1.#ctor(System.Predicate{System.Object})">
            <summary>
            Initailizes the  new instance of <see cref="T:Telerik.JustMock.Setup.ArgumentContainer`1"/> class.
            </summary>
            <param name="condition">Expression condition</param>
        </member>
        <member name="M:Telerik.JustMock.Setup.ArgumentContainer`1.op_Implicit(Telerik.JustMock.Setup.ArgumentContainer{`0})~`0">
            <summary>
            Converts the <see cref="T:Telerik.JustMock.Setup.ArgumentContainer`1"/> to the target type.
            </summary>
            <param name="container">current container instance.</param>
            <returns>Default value for the type</returns>
        </member>
        <member name="T:Telerik.JustMock.Setup.MethodInstance">
            <summary>
            Contains the different values instance for expectations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.MethodInstance.Validate(System.Object[],System.Boolean)">
            <summary>
            Validates the specified arguments for the expected method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.MethodInstance.Invoked">
            <summary>
            Gets a value indicating whether the method is already executed by user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Setup.MethodInstance.GetOutputArguments">
            <summary>
            Gets the an array of expected arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.Assert">
            <summary>
            Gets or sets the if the instance should be asserted for any type match.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.Args">
            <summary>
            Gets/Sets arguments list for the expected method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.Id">
            <summary>
            Gets the id for current instance.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.IgnoreArguments">
            <summary>
            Gets or sets a value indicating whether to ignore the arguments.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.IsNested">
            <summary>
            Gets or sets a value if the method call is nested.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.IsSetup">
            <summary>
            Gets or sets if the instance is a setup.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.Parent">
            <summary>
            Gets or sets the parent container.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.UserExpectation">
            <summary>
            Gets user set expectations.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.IsSubscribeEvent">
            <summary>
            Gets or sets if it is a subscribe event call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.IsInstanceIgnored">
            <summary>
            Gets or sets whether the method instance is agnostic.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.CurentInstanceMetaData">
            <summary>
            Gets or sets latest instance meta data that is invoked. 
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.NumerOfTimesExecuted">
            <summary>
            Gets or sets number of times a method is executed.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.Error">
            <summary>
            Gets or set the error for this instance.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.IsAutoArranged">
            <summary>
            Marks the instance is auto arranged Ex. setting value to  properly.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.Sequence">
            <summary>
            Gets/ Sets the sequence.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.IsExecuted">
            <summary>
            Gets if a method setup is already executed.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodInstance.InstanceMetaData.Marked">
            <summary>
            Specifies that the instance is marked for assertion count.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IProtectedExpectation`1">
            <summary>
            Interface for containing protected expectations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IProtectedExpectation`1.Method``1(System.String,Telerik.JustMock.Setup.ArgumentContainer[])">
            <summary>
            Sets up a void method expecation for projected method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IEventExpectation`2">
            <summary>
            Interface for containing events expectations.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IEventExpectation`2.Raises(System.Action{`0},System.Object[])">
            <summary>
            Raises the expected event.
            </summary>
            <param name="action">Event delegate to execute.</param>
            <param name="args">arguments for the event.</param>
            <returns>Reference to <see cref="T:Telerik.JustMock.Expectations.Abstraction.IExpectation"/></returns>
        </member>
        <member name="T:Telerik.JustMock.Guard">
            <summary>
            Helper class for argument validation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Guard.IsNotNull(System.Object,System.String)">
            <summary>
            Ensures the specified collection is not null.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Telerik.JustMock.Guard.IsNotNullOrEmpty``1(``0[],System.String)">
            <summary>
            Ensures the specified array is not null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:Telerik.JustMock.Interceptors.IMockInterceptor">
            <summary>
            Interface to intercept calls.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.IMockInterceptor.Intercept(Telerik.JustMock.MockInvocation)">
            <summary>
            Intercepts mock call.
            </summary>
            <param name="mockInvocation"></param>
        </member>
        <member name="T:Telerik.JustMock.InternalHelpers.MethodInfoHelper">
            <summary>
            Contains the exetions methods used in various parts of the project.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.InternalHelpers.MethodInfoHelper.GetElementHashCode(System.Reflection.MethodInfo)">
            <summary>
            Gets the hashcode for original, in case of generic method.
            </summary>
            <param name="method">Target method</param>
            <returns>Element hashCode</returns>
        </member>
        <member name="M:Telerik.JustMock.InternalHelpers.MethodInfoHelper.IsFrameworkMember(System.Reflection.MethodInfo)">
            <summary>
            Checks if the method belongs to .net framework.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.InternalHelpers.MethodInfoHelper.IsFrameworkType(System.Type)">
            <summary>
            Checks if the speicified type is from mscorlib.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Interceptors.IMethodInterceptor">
            <summary>
            Contains method interceptions.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.IMethodInterceptor.OnMethodExecuting(Telerik.JustMock.MethodInvocation)">
            <summary>
            Called, when an expected method is executing.
            </summary>
            <returns>original/expected value</returns>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.IMethodInterceptor.OnMethodExecuted(System.Object,Telerik.JustMock.Interceptors.InterceptorEventArgs)">
            <summary>
            Processes post excution tasks.
            </summary>
            <param name="sender"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.Setup.UserExpectation">
            <summary>
            Defines user expecations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.UserExpectation.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Setup.UserExpectation"/> class.
            </summary>
            <param name="method">Containing method</param>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.Method">
            <summary>
            Gets or sets the method for which the expectation is created.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.Index">
            <summary>
            Gets or sets the index for current expectation.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.IsReturnSet">
            <summary>
            Gets a value indicating if the user has set a return value for the expectation.
            </summary>
            <remarks>
            Setup throws exception in strict mock, if this property is not set to true.
            </remarks>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.PassArgumentsToReturn">
            <summary>
            Gets or sets if user arugments needs to pass in <code>Returns</code> call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.PassArgumentsToCallback">
            <summary>
            Gets or sets if user arguments need to pass to <code>DoInstead</code> call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.IsMust">
            <summary>
            Gets <value>true</value> if an method is assertable.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.Occurs">
            <summary>
            Gets the number of times a call should occur specified by user..
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.IsOverriable">
            <summary>
            Gets or sets a value indicating that setup can be overriden.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.IsGenerated">
            <summary>
            Gets or sets a value indicating that whether the value is generated.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.Exception">
            <summary>
            Gets or sets the exception to be thrown.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.Returns">
            <summary>
            Gets or sets return value for the expected method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.MethodBody">
            <summary>
            Contains the delegate to the setup method body.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.EventContainer">
            <summary>
            Contains the info about Expected event.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.ReturnCallback">
            <summary>
            Gets callback for the expected method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.Return">
            <summary>
            Gets or sets the return value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.CallBase">
            <summary>
            Gets or sets if the original method is to be called.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.IsInOrder">
            <summary>
            Gets or sets a value indicating that call should occur in specific order.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.ScopeToken">
            <summary>
            Gets or sets the test scope token.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.OrderInScope">
            <summary>
            Gets or sets the setup order in current scope.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.UserExpectation.HasDoInstead">
            <summary>
            Gets or sets if setup has DoInstead defined.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.ContainerContext.Add(System.Reflection.MethodBase,Telerik.JustMock.Setup.Container)">
            <summary>
            Adds the specified container for the target method.
            </summary>
            <param name="methodBase">Target method</param>
            <param name="container">Target container</param>
        </member>
        <member name="M:Telerik.JustMock.Weaver.ContainerContext.Add(System.Type,System.Reflection.MethodBase,Telerik.JustMock.Setup.Container)">
            <summary>
            Adds the specified container for the target method.
            </summary>
            <param name="methodInfo">Target method info.</param>
            <param name="target">Target Type</param>
            <param name="container">Mock container</param>
        </member>
        <member name="M:Telerik.JustMock.Weaver.ContainerContext.Add(System.Type,System.Reflection.MethodBase,System.Object,Telerik.JustMock.Setup.Container)">
            <summary>
            Adds the specified container for the target method.
            </summary>
            <param name="targetType">Target type</param>
            <param name="methodBase">Target method info.</param>
            <param name="target">Instance for the target type.</param>
            <param name="container">Target mock container</param>
        </member>
        <member name="M:Telerik.JustMock.Weaver.ContainerContext.Get(System.Reflection.MethodBase,System.Object)">
            <summary>
            Gets the mock container for the specified method and target combination.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Weaver.ContainerContext.Get(System.Type,System.Reflection.MethodBase,System.Object)">
            <summary>
            Gets the mock container for the specified method and target combination.
            </summary>
            <param name="targetType">Target type.</param>
            <param name="methodInfo">Target method.</param>
            <param name="target">Target instance.</param>
            <returns>Target mock container.</returns>
        </member>
        <member name="M:Telerik.JustMock.Weaver.ContainerContext.Get(System.Type,System.Reflection.MethodBase)">
            <summary>
            Gets a list of containers for a selected target, considering current context.
            </summary>
            <param name="targetType"></param>
            <param name="methodBase">Target methodinfo</param>
            <returns>List of containers</returns>
        </member>
        <member name="T:Telerik.JustMock.Weaver.Interceptors.Abstraction.IWeaverInterceptor">
            <summary>
            Interface for intercepting weaver calls.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.Interceptors.Abstraction.IWeaverInterceptor.Intercept(Telerik.JustMock.Weaver.Abstraction.IInvocation)">
            <summary>
            Callback from weaver method.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Weaver.Abstraction.IInvocation">
            <summary>
            IInvocation 
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.Abstraction.IInvocation.ContinueToOriginal">
            <summary>
            Continues to original statement
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.Abstraction.IInvocation.SetReturn(System.Object)">
            <summary>
            Set the return value for func type calls.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Telerik.JustMock.Weaver.Abstraction.IInvocation.Args">
            <summary>
            Gets the arguments
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Weaver.Abstraction.IInvocation.Method">
            <summary>
            Gets the target method
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Weaver.Abstraction.IInvocation.InterceptorMethod">
            <summary>
            Gets the intercepting method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Weaver.Abstraction.IInvocation.Target">
            <summary>
            Gets the target
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Weaver.DynamicInjector">
            <summary>
            Injects code to target method using weaver dynamically.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.DynamicInjector.InjectFramework(System.Type,System.Reflection.MethodBase,System.Reflection.MethodBase)">
            <summary>
            Inject the framework inside a container.
            </summary>
            <param name="methodInfo">Method to inject</param>
            <param name="containerMethodInfo">Containing method</param>
        </member>
        <member name="T:Telerik.JustMock.Weaver.WeaverInvocation">
            <summary>
            WeaverInvocation wrapper.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.WeaverInvocation.#ctor(System.Object,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Weaver.WeaverInvocation"/> class.
            </summary>
            <param name="target"></param>
            <param name="method"></param>
            <param name="interceptorMethod"></param>
            <param name="args"></param>
        </member>
        <member name="M:Telerik.JustMock.Weaver.WeaverInvocation.ContinueToOriginal">
            <summary>
            Sets if the original code should be executed.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.WeaverInvocation.SetReturn(System.Object)">
            <summary>
            Sets the return value.
            </summary>
            <param name="value">Target value</param>
        </member>
        <member name="P:Telerik.JustMock.Weaver.WeaverInvocation.Args">
            <summary>
            Gets the arguments for the weaved call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Weaver.WeaverInvocation.Method">
            <summary>
            Gets the method detail for the weaved call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Weaver.WeaverInvocation.InterceptorMethod">
            <summary>
            Gets the interceptor method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Weaver.WeaverInvocation.Target">
            <summary>
            Gets the target for the weaved call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Weaver.WeaverInvocation.ReturnValue">
            <summary>
            Gets the return value for weaved call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Weaver.WeaverInvocation.ExecuteUserCode">
            <summary>
            Gets a value indicating that code should continue to original block.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Invocation">
            <summary>
            Contains details for the invocation on mock.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Invocation.Current">
            <summary>
            Gets or set the executing call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Invocation.Telerik#JustMock#Abstraction#IInvocation#IgnoreAnyAssertArgs">
            <summary>
            Gets or sets value indicating whether to ignore assert arguments.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Invocation.Telerik#JustMock#Abstraction#IInvocation#IsNested">
            <summary>
            Get or sets if the invocation is nested.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Invocation.Telerik#JustMock#Abstraction#IInvocation#Method">
            <summary>
            Gets the last mock method call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Invocation.Telerik#JustMock#Abstraction#IInvocation#Event">
            <summary>
            Gets the calling event detail.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Invocation.Telerik#JustMock#Abstraction#IInvocation#MatcherArguments">
            <summary>
            Gets the container for a existing default value.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Invocation.Telerik#JustMock#Abstraction#IInvocation#MatcherPositions">
            <summary>
            Gets or sets the argument matchers position dictionary.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.ExecutionResult">
            <summary>
            Enum defining execution flow for the mock.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.ExecutionResult.InvokeBase">
            <summary>
            Specify to inovke the base method.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.ExecutionResult.Proceed">
            <summary>
            Specify to continue with the current flow.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MethodInvocation">
            <summary>
            Defines mock invocation details.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MethodInvocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MethodInvocation"/> class.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MethodInvocation.Method">
            <summary>
            Gets/ sets the executing method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MethodInvocation.Instance">
            <summary>
            Gets / Sets the instance for current method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MethodInvocation.Args">
            <summary>
            Gets/Sets the method args.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MethodInvocation.Return">
            <summary>
            Gets or Sets the result.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MethodInvocation.ExecutionResult">
            <summary>
            Gets/Sets the execution result that defines how the builder should handle post execution.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MethodInvocation.Target">
            <summary>
            Gets the invocation target;
            </summary>
        </member>
        <member name="T:Telerik.JustMock.MockException">
            <summary>
            Mock exception.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Telerik.JustMock.MockException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Telerik.JustMock.MockAssertion">
            <summary>
            Defines number of a times a called should occur in a
            mocked object.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockAssertion.#ctor(Telerik.JustMock.Occurs)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockAssertion"/> class.
            </summary>
            <param name="occurs">Specifies the number of times a call must occur</param>
        </member>
        <member name="M:Telerik.JustMock.MockAssertion.AssertMethod(Telerik.JustMock.Setup.MethodCall)">
            <summary>
            Asserts a specific method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockAssertion.Assert(System.Object)">
            <summary>
            Asserts only the required setups.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockAssertion.AssertAll(System.Object)">
            <summary>
            Asserts all setup.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Interceptors.MockInterceptor">
            <summary>
            Intercepts the mock call.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.MockInterceptor.#ctor(Telerik.JustMock.Setup.Container)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Interceptors.MockInterceptor"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.MockInterceptor.Intercept(Telerik.JustMock.MockInvocation)">
            <summary>
             Intercept method call.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.MockInterceptor.OnExecution(Telerik.JustMock.MethodInvocation)">
            <summary>
            Executes mock according to user setup.
            </summary>
            <returns>original/expected value</returns>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.MockInterceptor.OnPreExecution(Telerik.JustMock.MethodInvocation)">
            <summary>
            Rasied before the actual setup is processed.
            </summary>
            <param name="invocation">Details of the current method invocation.</param>
            <returns><see cref="T:Telerik.JustMock.ExecutionResult"/> indicating whether the custom code should execute.</returns>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.MockInterceptor.Execute(Telerik.JustMock.MethodInvocation)">
            <summary>
            Executes the method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.MockInvocation">
            <summary>
            Wraps the mocked invocation.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockInvocation.SetReturn(System.Object)">
            <summary>
            Sets the return value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Telerik.JustMock.MockInvocation.CallBase(System.Boolean)">
            <summary>
            Skips the mock call.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Telerik.JustMock.MockInvocation.Method">
            <summary>
            Gets the calling method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockManager.#ctor(System.Type,Telerik.JustMock.Behavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockManager"/> class.
            </summary>
            <param name="target">Target object type</param>
            <param name="mode">Mode in which mocking to be done.</param>
        </member>
        <member name="M:Telerik.JustMock.MockManager.#ctor(System.Type,Telerik.JustMock.Behavior,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockManager"/> class.
            </summary>
            <param name="target">Target type</param>
            <param name="mode">Mode of the mock</param>
            <param name="arguments">Constructor arguments</param>
        </member>
        <member name="M:Telerik.JustMock.MockManager.#ctor(System.Type,Telerik.JustMock.Behavior,Telerik.JustMock.Constructor,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.MockManager"/> class.
            </summary>
            <param name="target">Target type</param>
            <param name="mode">Specifies the mocking behavior</param>
            <param name="ctor">Specifies whether to mock the constructor</param>
            <param name="arguments">Constructor arguments</param>
        </member>
        <member name="M:Telerik.JustMock.MockManager.CreateInstance">
            <summary>
            Gets the new instance of the mocked object.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockManager.SetupStatic">
            <summary>
            Setups the static mock.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockManager.Interfaces">
            <summary>
            Gets or sets the list of interfaces to implement.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Occurrence">
            <summary>
            Specifies the number of time(s) an expected call should occur
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Occurrence.AtLeast">
            <summary>
            At least the number of times
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Occurrence.AtLeastOnce">
            <summary>
            At least once
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Occurrence.AtMost">
            <summary>
            At most the number of times.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Occurrence.Exactly">
            <summary>
            Exactly the number of times.
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Occurrence.Never">
            <summary>
            Occurs never
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Occurrence.Once">
            <summary>
            Occurs once
            </summary>
        </member>
        <member name="F:Telerik.JustMock.Occurrence.NotDefined">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Occurs">
            <summary>
            Defines filters for calls , used in conjunction with assert.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.#ctor(System.Func{System.Int32,System.Boolean},Telerik.JustMock.Occurrence,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Telerik.JustMock.Occurs"/> class.
            </summary>
            <param name="condition">Occurrence condition.</param>
            <param name="occurrence">Type of occurrence</param>
            <param name="expectedCallCount">Expected call count</param>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Never">
            <summary>
            Specifies that the expected call must never occur
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Once">
            <summary>
            Specifies that the expected call should occur once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtLeast(System.Int32)">
            <summary>
            Specifies that the expected call should occur at least <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtLeastOnce">
            <summary>
            Specifies that the expected call should occur at least once.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.AtMost(System.Int32)">
            <summary>
            Specifies that the expected call should occur at most <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Exactly(System.Int32)">
            <summary>
            Specifies that the expected call should occur exactly <paramref name="numberOfTimes"/>  times.
            </summary>
            <param name="numberOfTimes">Specific number of times</param>
        </member>
        <member name="M:Telerik.JustMock.Occurs.NotAvailable">
            <summary>
            Specifies that occurrence is not available.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Occurs.Matches(System.Int32)">
            <summary>
            Matches a call occurence for an expected value.
            </summary>
            <param name="numberOfTimesExecuted"></param>
        </member>
        <member name="P:Telerik.JustMock.Occurs.Occurrence">
            <summary>
            Gets the occurrence type.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Occurs.ExpectedCallCount">
            <summary>
            Gets the expected call count.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Setup.Container">
            <summary>
            Contains metadata information of the target mock.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.Container.#ctor(Telerik.JustMock.Behavior)">
            <summary>
            Initailizes a new instance of the <see cref="T:Telerik.JustMock.Setup.Container"/> class.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.Container.GetMethodCall(System.Reflection.MethodInfo)">
            <summary>
            Returns the associated method call with the container and
            creates new if necessary.
            </summary>
            <param name="info"><see cref="T:System.Reflection.MethodInfo"/></param>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.Target">
            <summary>
            Gets or sets the target instance.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.ExtentionTarget">
            <summary>
            Gets or set the extension method target.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.Offset">
            <summary>
            Gets or set this execution offset.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.InterfacesToImplement">
            <summary>
            Contains type of interfaces the class would implement.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.EventMappings">
            <summary>
            Gets the event mapping for a particular class.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.Behavior">
            <summary>
            Gets a value indicating the behavior of the mock.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.Methods">
            <summary>
            Contains <see cref="T:Telerik.JustMock.Setup.MethodInstance"/> for method hashCode.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.IgnoreConstructor">
            <summary>
            Gets or set a value to ignore the constructor call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.Container.IgnoreInstance">
            <summary>
            Gets or sets a value indicating that instance is ignored.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Interceptors.MethodInterceptor">
            <summary>
            Intercepts and executes mocked methods as specified during setup.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.MethodInterceptor.#ctor(Telerik.JustMock.Behavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Interceptors.MethodInterceptor"/> class.
            </summary>
            <param name="behavior">Specifies the behavior of the mocked call</param>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.MethodInterceptor.OnMethodExecuting(Telerik.JustMock.MethodInvocation)">
            <summary>
            Invoked when an expected method is executing.
            </summary>
            <param name="invocation">Contains the detail for method invocation.</param>
            <returns>Expected value</returns>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.MethodInterceptor.OnMethodExecuted(System.Object,Telerik.JustMock.Interceptors.InterceptorEventArgs)">
            <summary>
            Processes post execution tasks.
            </summary>
            <param name="sender"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Interceptors.MethodInterceptor.IsSetupCall">
            <summary>
            Gets or sets a value indicating if the interception is due to setup call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Interceptors.MethodInterceptor.IsAssertCall">
            <summary>
            Gets or sets a value indicating if the interception is due to assert call.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Abstraction.IExpectation">
            <summary>
            Base class for setting up expectations.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IExpectation.Process``1(Telerik.JustMock.Abstraction.IInvocation)">
            <summary>
            Sets up a method expectation and with filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Abstraction.IExpectation.Process(Telerik.JustMock.Abstraction.IInvocation)">
            <summary>
            Sets up a void method expectation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.JustMock.MockContext">
            <summary>
            Contains the current mock object context.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockContext.#ctor(Telerik.JustMock.Instruction)">
            <summary>
            Initializes new instance of the <see cref="T:Telerik.JustMock.MockContext"/> class.
            <param name="instruction">Defines the context under which the mock call is made. Ex.Assert,Arrage, etc</param>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockContext.#ctor(Telerik.JustMock.Instruction,System.Boolean)">
            <summary>
            Initializes new instance of the <see cref="T:Telerik.JustMock.MockContext"/> class.
            <param name="instruction">Defines the context under which the mock call is made. Ex.Assert,Arrage, etc</param>
            <param name="preserveState">Specifies that it should restore previous context upon dispose</param>
            </summary>
        </member>
        <member name="M:Telerik.JustMock.MockContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Telerik.JustMock.MockContext.Setup``1(Telerik.JustMock.Instruction,System.Action{Telerik.JustMock.MockContext{``0}})">
            <summary>
            Setups the MockContext and executes the specified action
            inside it.
            </summary>
            <param name="instruction">Defines the context under which the mock call is made. Ex.Assert,Arrage, etc</param>
            <param name="action">Target action call</param>
        </member>
        <member name="M:Telerik.JustMock.MockContext.Setup``2(Telerik.JustMock.Instruction,System.Func{Telerik.JustMock.MockContext{``0},``1})">
            <summary>
            Setups the MockContext and executes the specified action
            inside it.
            </summary>
            <param name="instruction"></param>
            <param name="function"></param>
        </member>
        <member name="P:Telerik.JustMock.MockContext.Containers">
            <summary>
            Gets the current class Container.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockContext.MethodTokenDictionary">
            <summary>
            Gets the dictionary for method token.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockContext.Instruction">
            <summary>
             Gets or sets value indicating call registration.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockContext.TestScopes">
            <summary>
            Gets the list of test scopes.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockContext.TestScope.ExpectedOrder">
            <summary>
            Gets or sets numeric order value in way mocks are arranged.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.MockContext.TestScope.ExecutionOrder">
            <summary>
            Get or set the execution order.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Expectations.Expectation">
            <summary>
            Fluent entry point for expected method, properties and events call.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Expectation.Process``1(Telerik.JustMock.Abstraction.IInvocation)">
            <summary>
            Processes the target function.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Expectations.Expectation.Process(Telerik.JustMock.Abstraction.IInvocation)">
            <summary>
            Processes the target action.
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Setup.MethodCall">
            <summary>
            Contains expected method details.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.MethodCall.AddNewInstance(Telerik.JustMock.Setup.MethodInstance)">
            <summary>
            Adds a new instance for current signature.
            </summary>
            <param name="methodInstance"></param>
        </member>
        <member name="M:Telerik.JustMock.Setup.MethodCall.AddNewInstance">
            <summary>
             Adds a new method instance for the current method call.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Setup.MethodCall.GetInstance(System.Object[],Telerik.JustMock.Instruction)">
            <summary>
            Gets a valued method instance.
            </summary>
            <param name="args"></param>
            <param name="instruction">Contains the execution instruction for the current call.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Setup.MethodCall.GetNewInstance(System.Object[],System.Type[])">
            <summary>
            for underlying types and value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodCall.Index">
            <summary>
            Get or sets the index of the method in container dictionary.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodCall.MethodInfo">
            <summary>
            Gets the <see cref="P:Telerik.JustMock.Setup.MethodCall.MethodInfo"/> for current call.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodCall.FullName">
            <summary>
            Gets the fully qualified name of the method.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodCall.Container">
            <summary>
            Gets the containing <see cref="T:Telerik.JustMock.Setup.Container"/> instance.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodCall.CurrentInstance">
            <summary>
            Gets the current method instance.
            </summary>
        </member>
        <member name="P:Telerik.JustMock.Setup.MethodCall.ExecutedStack">
            <summary>
            Gets the execution stack
            </summary>
        </member>
        <member name="T:Telerik.JustMock.Interceptors.ProxyInterceptor">
            <summary>
            Entry point interceptor to be called by dynamic proxy.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.ProxyInterceptor.#ctor(Telerik.JustMock.Setup.Container)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Interceptors.ProxyInterceptor"/> class.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Telerik.JustMock.Interceptors.ProxyInterceptor.Intercept(Telerik.JustMock.DynamicProxy.Abstraction.IInvocation)">
            <summary>
            Intercepts proxied method calls.
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Telerik.JustMock.Utility">
            <summary>
            Contains Helper methods for use in various parts of the project.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Utility.ToTypeArray(System.Reflection.ParameterInfo[],System.Int32)">
            <summary>
            Converts the parameters to its equavalent type array format.
            </summary>
            <param name="parameterInfos">ParaInfos</param>
            <param name="paramLen">Length of the specified <see cref="T:System.Reflection.ParameterInfo"/> array</param>
            <returns>Array of parameter types</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterator over IEnumerable
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="enumeration">Target enumeration</param>
            <param name="action">Target action</param>
        </member>
        <member name="M:Telerik.JustMock.Utility.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            Iterator over IEnumerable
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="enumeration">Target enumeration</param>
            <param name="action">Target action</param>
        </member>
        <member name="M:Telerik.JustMock.Utility.GetField``1(System.Object)">
            <summary>
            Gets the field for given target and type.
            </summary>
            <typeparam name="T">Type of field value to get</typeparam>
            <param name="target">Target to look for</param>
            <returns>Value of the target field</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.CreateSafeInstance(System.Type,Telerik.JustMock.Setup.Container,System.Object[])">
            <summary>
            Injects all constructors for the type and creates an instance from first or default
            one if mocked.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Utility.RegisterContainer(System.Reflection.MethodBase,Telerik.JustMock.Setup.Container)">
            <summary>
            Registers the container for target member to mock context.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Utility.RegisterContainer(System.Reflection.MethodBase,System.Type,Telerik.JustMock.Setup.Container)">
            <summary>
            Registers the container for target member to mock context.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Utility.CreateArgument(System.Type,System.Object)">
            <summary>
            Creates the argument container from target type and value.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Utility.IsMatcherArgument(System.Linq.Expressions.Expression)">
            <summary>
            Checks if a member of from the expression is a matcher type argument.
            </summary>
            <param name="expression">Target expression</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.FindAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Tries to find the target custom attribute, returns null if there isnt any.
            </summary>
            <typeparam name="TAttribute">Target attribute to find.</typeparam>
            <param name="source">Attribute provider</param>
            <param name="inherit">Marks if the attribute is inherited.</param>
            <returns>Target Attrubute</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.IsInstrinsicType(System.Type)">
            <summary>
            Checks if the target is pre-defined.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>Value indicating that a type is pre-defined or not.</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.IsDefault(System.Type,System.Object)">
            <summary>
            Checks if the specified value is a default type value.
            </summary>
            <param name="valueType">Type of the value</param>
            <param name="value">SpecifiedValue</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.GetTargetExpression``1(System.Object,System.Type,System.Object[],System.Reflection.MethodInfo)">
            <summary>
            Gets the target mock expression for sepcified type and method.
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="target"></param>
            <param name="targetType"></param>
            <param name="args"></param>
            <param name="miTarget"></param>
            <returns>Expected expression</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.GetTargetExpression(System.Object,System.Type,System.Object[],System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets the target mock expression for sepcified type and method.
            </summary>
            <param name="target"></param>
            <param name="targetType"></param>
            <param name="args"></param>
            <param name="miTarget"></param>
            <param name="delegateType">Type of the delegate</param>
            <returns>Expected expression</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.GetTypeFrom(System.String)">
            <summary>
            Gets the type from the fully qualified name.
            </summary>
            <param name="fullName">Name of the type with assembly qualifier</param>
            <returns>Resolved type</returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.IsProxy(System.Type)">
            <summary>
            Checks if a type is proxy.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.JustMock.Utility.FindCallingAssembly">
            <summary>
            Finds the calling assembly from the stack trace.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Utility.FindCallingAssembly(System.Int32)">
            <summary>
            Finds the calling assembly from the stack trace.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Utility.ToMethodString(System.Reflection.MethodInfo)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the method.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Utility.FindTestMethod(System.Int32)">
            <summary>
            Finds the test method that is containing the call.
            </summary>
            <param name="noOfCallsToSkip">Number of calls to skip</param>
            <returns>Target test method</returns>
        </member>
        <member name="T:Telerik.JustMock.Weaver.Interceptors.WeaverInterceptor">
            <summary>
            Entry point interceptor for Weaver calls.
            </summary>
        </member>
        <member name="M:Telerik.JustMock.Weaver.Interceptors.WeaverInterceptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.JustMock.Weaver.Interceptors.WeaverInterceptor"/> class.
            </summary>
        </member>
    </members>
</doc>
